
BiLedMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000ee  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003db  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000126  00000000  00000000  000005df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000025f  00000000  00000000  00000705  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c4  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000195  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000060  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ee       	ldi	r30, 0xEE	; 238
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  7a:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <O>:
	}
	_delay_ms(20) ;
}

void O(){
	if(ch==1 || ch==(1<<7)){
  82:	80 91 61 00 	lds	r24, 0x0061
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	11 f0       	breq	.+4      	; 0x8e <O+0xc>
  8a:	80 38       	cpi	r24, 0x80	; 128
  8c:	39 f4       	brne	.+14     	; 0x9c <O+0x1a>
		PORTD = 0xFF ;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	82 bb       	out	0x12, r24	; 18
		PORTA = ~ch ;
  92:	80 91 61 00 	lds	r24, 0x0061
  96:	80 95       	com	r24
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <O+0x26>
	}
	else{
		PORTD = 0x81 ;
  9c:	81 e8       	ldi	r24, 0x81	; 129
  9e:	82 bb       	out	0x12, r24	; 18
		PORTA = ~ch ;
  a0:	80 91 61 00 	lds	r24, 0x0061
  a4:	80 95       	com	r24
  a6:	8b bb       	out	0x1b, r24	; 27
	}
	if(ch==(1<<7)){
  a8:	80 91 61 00 	lds	r24, 0x0061
  ac:	80 38       	cpi	r24, 0x80	; 128
  ae:	39 f4       	brne	.+14     	; 0xbe <O+0x3c>
		ch = 1 ;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 61 00 	sts	0x0061, r24
		b = 1<<7 ;
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	80 93 60 00 	sts	0x0060, r24
  bc:	08 c0       	rjmp	.+16     	; 0xce <O+0x4c>
	}
	else{
		ch = ch<<1 ;
  be:	88 0f       	add	r24, r24
  c0:	80 93 61 00 	sts	0x0061, r24
		b = b>>1 ;
  c4:	80 91 60 00 	lds	r24, 0x0060
  c8:	86 95       	lsr	r24
  ca:	80 93 60 00 	sts	0x0060, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	83 ef       	ldi	r24, 0xF3	; 243
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <O+0x50>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <O+0x56>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <main>:
}


int main(void)
{
	DDRA = 0xFF ;
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF ;
  e0:	81 bb       	out	0x11, r24	; 17
	PORTA =0x00 ;
  e2:	1b ba       	out	0x1b, r1	; 27
    while(1)
    {
		O() ;
  e4:	0e 94 41 00 	call	0x82	; 0x82 <O>
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <main+0x8>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
