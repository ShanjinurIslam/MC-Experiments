
LEDBlink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000146  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000011d  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d3  00000000  00000000  000002b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012a  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000186  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000065a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 67 00 	jmp	0xce	; 0xce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 100000
#include <util/delay.h>

unsigned char c = 0 ;
int main(){
	DDRD = 0x0F;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFB ;
  80:	8b ef       	ldi	r24, 0xFB	; 251
  82:	87 bb       	out	0x17, r24	; 23
	PORTD = 0xFF ;
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	82 bb       	out	0x12, r24	; 18
	while(1){
		if((PINB & 0x01)){
  88:	b0 9b       	sbis	0x16, 0	; 22
  8a:	0e c0       	rjmp	.+28     	; 0xa8 <main+0x2c>
			if(c==(1<<4)){
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	80 31       	cpi	r24, 0x10	; 16
  92:	19 f4       	brne	.+6      	; 0x9a <main+0x1e>
				c = 0 ;
  94:	10 92 60 00 	sts	0x0060, r1
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x24>
			}
			else c++ ;
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 60 00 	sts	0x0060, r24
			PORTD = c ;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	82 bb       	out	0x12, r24	; 18
  a6:	0c c0       	rjmp	.+24     	; 0xc0 <main+0x44>
		}
		else if((PINB & 0x02)){
  a8:	b1 9b       	sbis	0x16, 1	; 22
  aa:	0a c0       	rjmp	.+20     	; 0xc0 <main+0x44>
			if(c==0){
  ac:	80 91 60 00 	lds	r24, 0x0060
  b0:	88 23       	and	r24, r24
  b2:	19 f0       	breq	.+6      	; 0xba <main+0x3e>
				c = 0 ;
			}
			else c-- ;
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	80 93 60 00 	sts	0x0060, r24
			PORTD = c ;
  ba:	80 91 60 00 	lds	r24, 0x0060
  be:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	8f e4       	ldi	r24, 0x4F	; 79
  c2:	93 ec       	ldi	r25, 0xC3	; 195
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x48>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4e>
  ca:	00 00       	nop
  cc:	dd cf       	rjmp	.-70     	; 0x88 <main+0xc>

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
