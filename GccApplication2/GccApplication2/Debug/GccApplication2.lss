
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001ac  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000187  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ed  00000000  00000000  00000393  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000163  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b1  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ac  00000000  00000000  00000811  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000008bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_2>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 89 00 	call	0x112	; 0x112 <main>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_2>:
#include <avr/io.h>
#include <avr/interrupt.h>


unsigned char ch = 0x00 ;
ISR(INT1_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	ch++;
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	8f 5f       	subi	r24, 0xFF	; 255
	ch &= 0b1111;
  92:	8f 70       	andi	r24, 0x0F	; 15
  94:	80 93 60 00 	sts	0x0060, r24
	PORTA = ch ;
  98:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e3       	ldi	r18, 0x3F	; 63
  9c:	8d e0       	ldi	r24, 0x0D	; 13
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <__vector_2+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_2+0x2e>
  aa:	00 00       	nop
	_delay_ms(1000) ;
	GIFR = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	8a bf       	out	0x3a, r24	; 58
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	2f 91       	pop	r18
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <__vector_3>:

ISR(INT2_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
	if(ch==0){
  d0:	80 91 60 00 	lds	r24, 0x0060
  d4:	81 11       	cpse	r24, r1
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <__vector_3+0x20>
		ch=0x0F ;
  d8:	8f e0       	ldi	r24, 0x0F	; 15
  da:	80 93 60 00 	sts	0x0060, r24
  de:	03 c0       	rjmp	.+6      	; 0xe6 <__vector_3+0x26>
	}
	else{
		ch-- ;
  e0:	81 50       	subi	r24, 0x01	; 1
  e2:	80 93 60 00 	sts	0x0060, r24
	}
	PORTA = ch ;
  e6:	80 91 60 00 	lds	r24, 0x0060
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	2f e3       	ldi	r18, 0x3F	; 63
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <__vector_3+0x32>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <__vector_3+0x3c>
  fc:	00 00       	nop
	_delay_ms(1000) ;
	GIFR = 0xFF;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	8a bf       	out	0x3a, r24	; 58
}
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <main>:

int main(void)
{
	DDRA = 0x0F ;
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	8a bb       	out	0x1a, r24	; 26
	PORTA = ch ;
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	8b bb       	out	0x1b, r24	; 27
	MCUCR = (MCUCR & 0b11111011) ;
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	85 bf       	out	0x35, r24	; 53
	MCUCR = (MCUCR | (1<<3)) ;
 122:	85 b7       	in	r24, 0x35	; 53
 124:	88 60       	ori	r24, 0x08	; 8
 126:	85 bf       	out	0x35, r24	; 53
	MCUCSR = MCUCSR & (!(1<<6)); 
 128:	84 b7       	in	r24, 0x34	; 52
 12a:	14 be       	out	0x34, r1	; 52
	GICR = 0xA0 ;
 12c:	80 ea       	ldi	r24, 0xA0	; 160
 12e:	8b bf       	out	0x3b, r24	; 59
	sei() ;
 130:	78 94       	sei
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x20>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
