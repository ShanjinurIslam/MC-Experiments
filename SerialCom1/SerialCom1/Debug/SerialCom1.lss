
SerialCom1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000025f  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000166  00000000  00000000  0000045d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019c  00000000  00000000  000005c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000ac  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001bd  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000de  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  64:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
#include <avr/interrupt.h>
#include <util/delay.h>


void UART_init(){
	UCSRA = 0x00 ;
  6c:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18 ;
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86 ;
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33 ;
  76:	83 e3       	ldi	r24, 0x33	; 51
  78:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0x00 ;
  7a:	10 bc       	out	0x20, r1	; 32
  7c:	08 95       	ret

0000007e <UART_send>:
}

void UART_send(unsigned char data){
	while((UCSRA & (1<<UDRE))==0x00);
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <UART_send>
	UDR = data ;
  82:	8c b9       	out	0x0c, r24	; 12
  84:	08 95       	ret

00000086 <UART_receive>:
}

unsigned char UART_receive(){
	while(((UCSRA)&(1<<RXC))==0);
  86:	5f 9b       	sbis	0x0b, 7	; 11
  88:	fe cf       	rjmp	.-4      	; 0x86 <UART_receive>
	return UDR ;
  8a:	8c b1       	in	r24, 0x0c	; 12
}
  8c:	08 95       	ret

0000008e <__vector_1>:

ISR(INT0_vect){
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	3f 93       	push	r19
  9c:	4f 93       	push	r20
  9e:	5f 93       	push	r21
  a0:	6f 93       	push	r22
  a2:	7f 93       	push	r23
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	af 93       	push	r26
  aa:	bf 93       	push	r27
  ac:	ef 93       	push	r30
  ae:	ff 93       	push	r31
	UART_send('a') ;
  b0:	81 e6       	ldi	r24, 0x61	; 97
  b2:	0e 94 3f 00 	call	0x7e	; 0x7e <UART_send>
	UCSRA = 0x00 ;
  b6:	1b b8       	out	0x0b, r1	; 11
	PORTA = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	87 ea       	ldi	r24, 0xA7	; 167
  be:	91 e6       	ldi	r25, 0x61	; 97
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <__vector_1+0x32>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <__vector_1+0x38>
  c6:	00 00       	nop
	_delay_ms(100) ;
	PORTA = 0x00 ;
  c8:	1b ba       	out	0x1b, r1	; 27
  ca:	87 ea       	ldi	r24, 0xA7	; 167
  cc:	91 e6       	ldi	r25, 0x61	; 97
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <__vector_1+0x40>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <__vector_1+0x46>
  d4:	00 00       	nop
	_delay_ms(100) ;
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:
int main(void)
{
	DDRB = 0xFF ;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xFF ;
  fc:	8a bb       	out	0x1a, r24	; 26
	UART_init() ;
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	unsigned char c ;
	MCUCSR = (MCUCSR | 0x03) ;
 102:	84 b7       	in	r24, 0x34	; 52
 104:	83 60       	ori	r24, 0x03	; 3
 106:	84 bf       	out	0x34, r24	; 52
	GICR = 0x40 ;
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	8b bf       	out	0x3b, r24	; 59
	sei() ;
 10c:	78 94       	sei
    while(1)
    {
		c = UART_receive() ;
		if(c=='a'){
			PORTB = 0xFF ;
 10e:	cf ef       	ldi	r28, 0xFF	; 255
	MCUCSR = (MCUCSR | 0x03) ;
	GICR = 0x40 ;
	sei() ;
    while(1)
    {
		c = UART_receive() ;
 110:	0e 94 43 00 	call	0x86	; 0x86 <UART_receive>
		if(c=='a'){
 114:	81 36       	cpi	r24, 0x61	; 97
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x18>
			PORTB = 0xFF ;
 118:	c8 bb       	out	0x18, r28	; 24
 11a:	83 e2       	ldi	r24, 0x23	; 35
 11c:	94 ef       	ldi	r25, 0xF4	; 244
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x26>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x2c>
 124:	00 00       	nop
			_delay_ms(250) ;
			PORTB = 0x00 ;
 126:	18 ba       	out	0x18, r1	; 24
 128:	83 e2       	ldi	r24, 0x23	; 35
 12a:	94 ef       	ldi	r25, 0xF4	; 244
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x34>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x3a>
 132:	00 00       	nop
 134:	ed cf       	rjmp	.-38     	; 0x110 <main+0x18>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
