
CT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000014c  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000158  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f8  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000131  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000177  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  000006bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include <util/delay.h>

unsigned char ch ;
int main(void)
{
	DDRA = 0x0F ;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00 ;
  80:	1b ba       	out	0x1b, r1	; 27
    while(1)
    {
		ch = PINA ;
  82:	89 b3       	in	r24, 0x19	; 25
  84:	80 93 60 00 	sts	0x0060, r24
		if(ch&0x40){
  88:	86 ff       	sbrs	r24, 6
  8a:	11 c0       	rjmp	.+34     	; 0xae <main+0x32>
			if(PORTA&0x01){
  8c:	d8 9b       	sbis	0x1b, 0	; 27
  8e:	04 c0       	rjmp	.+8      	; 0x98 <main+0x1c>
				PORTA = PORTA & 0x0E ; 
  90:	8b b3       	in	r24, 0x1b	; 27
  92:	8e 70       	andi	r24, 0x0E	; 14
  94:	8b bb       	out	0x1b, r24	; 27
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x1e>
			}
			else PORTA = PORTA | 0x01 ;
  98:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f e9       	ldi	r18, 0x9F	; 159
  9c:	86 e8       	ldi	r24, 0x86	; 134
  9e:	91 e0       	ldi	r25, 0x01	; 1
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2e>
  aa:	00 00       	nop
  ac:	ea cf       	rjmp	.-44     	; 0x82 <main+0x6>
			_delay_ms(500) ;
		}
		
		else if(ch&0x80){
  ae:	88 23       	and	r24, r24
  b0:	44 f7       	brge	.-48     	; 0x82 <main+0x6>
			if(PORTA&0x02){
  b2:	d9 9b       	sbis	0x1b, 1	; 27
  b4:	04 c0       	rjmp	.+8      	; 0xbe <main+0x42>
				PORTA = PORTA & 0x0D ;
  b6:	8b b3       	in	r24, 0x1b	; 27
  b8:	8d 70       	andi	r24, 0x0D	; 13
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	01 c0       	rjmp	.+2      	; 0xc0 <main+0x44>
			}
			else PORTA = PORTA | 0x02 ;
  be:	d9 9a       	sbi	0x1b, 1	; 27
  c0:	2f e9       	ldi	r18, 0x9F	; 159
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x4a>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x54>
  d0:	00 00       	nop
  d2:	d7 cf       	rjmp	.-82     	; 0x82 <main+0x6>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
