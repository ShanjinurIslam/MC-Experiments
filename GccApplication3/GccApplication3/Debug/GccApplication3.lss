
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000001a0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000187  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ed  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000162  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b1  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000ac  00000000  00000000  00000805  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 88 00 	call	0x110	; 0x110 <main>
  74:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
#include <avr/io.h>
#include <avr/interrupt.h>


unsigned char ch = 0x00 ;
ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
	if(ch==(1<<4)){
  8c:	80 91 60 00 	lds	r24, 0x0060
  90:	80 31       	cpi	r24, 0x10	; 16
  92:	21 f4       	brne	.+8      	; 0x9c <__vector_1+0x20>
		ch = 0 ;
  94:	10 92 60 00 	sts	0x0060, r1
		PORTA = ch ;
  98:	1b ba       	out	0x1b, r1	; 27
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <__vector_1+0x28>
	}
	else{
		ch++ ;
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	80 93 60 00 	sts	0x0060, r24
		PORTA = ch ;
  a2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <__vector_1+0x2e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <__vector_1+0x38>
  b4:	00 00       	nop
	}
	_delay_ms(1000) ;
	GIFR = 0xFF ;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a bf       	out	0x3a, r24	; 58
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_2>:

ISR(INT1_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	if(ch!=0){
  da:	80 91 60 00 	lds	r24, 0x0060
  de:	88 23       	and	r24, r24
  e0:	21 f0       	breq	.+8      	; 0xea <__vector_2+0x20>
		ch-- ;
  e2:	81 50       	subi	r24, 0x01	; 1
  e4:	80 93 60 00 	sts	0x0060, r24
		PORTA = ch ;
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	2f e3       	ldi	r18, 0x3F	; 63
  ec:	8d e0       	ldi	r24, 0x0D	; 13
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <__vector_2+0x26>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <__vector_2+0x30>
  fa:	00 00       	nop
	}
	_delay_ms(1000) ;
	GIFR = 0xFF ;
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a bf       	out	0x3a, r24	; 58
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <main>:

int main(void)
{
	DDRA = 0x0F ;
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	8a bb       	out	0x1a, r24	; 26
	PORTA = ch ;
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	8b bb       	out	0x1b, r24	; 27
	MCUCR = (MCUCR & 0xF0) ;
 11a:	85 b7       	in	r24, 0x35	; 53
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0 ;
 120:	80 ec       	ldi	r24, 0xC0	; 192
 122:	8b bf       	out	0x3b, r24	; 59
	sei() ;
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x16>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
